<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/styles.css" />
    <title></title>
    <script>
        // Random, readable background color for black text
        function randomAccessibleColor({ minContrast = 4.5, maxTries = 100 } = {}) {
            const srgbToLin = v => {
                v /= 255;
                return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
            };
            const luminance = ({ r, g, b }) =>
                0.2126 * srgbToLin(r) + 0.7152 * srgbToLin(g) + 0.0722 * srgbToLin(b);

            const hslToRgb = (h, s, l) => {
                s /= 100; l /= 100;
                const k = n => (n + h / 30) % 12;
                const a = s * Math.min(l, 1 - l);
                const f = n =>
                l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));
                return {
                r: Math.round(255 * f(0)),
                g: Math.round(255 * f(8)),
                b: Math.round(255 * f(4)),
                };
            };
            const rgbToHex = ({ r, g, b }) =>
                "#" + [r, g, b].map(x => x.toString(16).padStart(2, "0")).join("");

            for (let i = 0; i < maxTries; i++) {
                // Keep saturation moderate; avoid extremes in lightness.
                const h = Math.floor(Math.random() * 360);   // 0–359
                const s = Math.floor(35 + Math.random() * 40); // 35–75%
                const l = Math.floor(45 + Math.random() * 25); // 45–70%

                const rgb = hslToRgb(h, s, l);
                const L = luminance(rgb);

                // Contrast of background vs black text (#000)
                const contrast = (L + 0.05) / 0.05;

                // Also avoid super bright/near dark by luminance guardrails.
                if (contrast >= minContrast && L >= 0.18 && L <= 0.9) {
                return rgbToHex(rgb);
                }
  }
  // Fallback if nothing found (should be rare)
  return "#7fb3d5"; // a readable mid-tone blue
}


        document.addEventListener("DOMContentLoaded", ()=>{       
            const dialog = document.getElementById("confirmDialog");
            const cancelBtn = document.getElementById("cancelBtn");
            const confirmBtn = document.getElementById("confirmBtn");

            let formToSubmit = null; // Store the form to submit
            
            // Show Dialog
            document.querySelectorAll("[id^='deleteBtn-']").forEach((btn)=>{
                btn.addEventListener("click", ()=>{
                    const item_id = btn.id.split("-")[1];
                    formToSubmit = document.getElementById(`deleteForm-${item_id}`);
                    dialog.showModal();
                })
            })

            // Confirm button submits the form
            confirmBtn.addEventListener("click", ()=>{
                if (!formToSubmit) return;
                formToSubmit.submit();
            })

            // Close dialog
            cancelBtn.addEventListener("click", () => {
                dialog.close();
            })

            document.querySelectorAll('.categoryContainer').forEach((container)=>{
                container.style.backgroundColor = randomAccessibleColor()
            })
        })

        function toggleMenu(index) {
          const menu = document.getElementById(`popupMenu-${index}`);
      
          // Close any other open menus first
          document.querySelectorAll('.catPopupMenu').forEach(m => {
            if (m !== menu) m.classList.add('hidden');
          });
      
          // Toggle current menu
          menu.classList.toggle('hidden');
        }
      
        // Close popup if clicked outside
        document.addEventListener('click', function(e) {
          if (!e.target.closest('.menuWrapper')) {
            document.querySelectorAll('.catPopupMenu').forEach(m => m.classList.add('hidden'));
          }
        });
      </script>

  </head>
  <body>
    <%- include('header') %>
    <!-- Item Delete confirm dialog -->
    <dialog id="confirmDialog">
        <h4>Are you sure you want to delete this category?</h4>
        <p>This action is irreversible.</p>
        <div class="dialogBtnWrapper">
            <button id="cancelBtn">Cancel</button>
            <button id="confirmBtn">Confirm</button>
        </div>
      </dialog>

      <a class="addNewCategoryBtn" href="/categories/new">
          <button class="addNewCategoryBtn" id="addNewCategoryBtn">Add New Category</button>
      </a>


    <!-- Items listing -->
    <div class="itemsDiv">
      <% categories.forEach((category, index) => { %>
        <% const {category_id, category_name, item_count} = category %>
        <div id="categoryContainer" class="categoryContainer">
            <div class="menuWrapper">
                <img id="menuIcon-<%= index %>"  class="catMenuIcon" src="https://cdn-icons-png.flaticon.com/512/6065/6065255.png" alt="Menu Icon"  onclick="toggleMenu(<%= index %>)">
    
                    <!-- Hidden popup menu -->
                <div id="popupMenu-<%= index %>" class="catPopupMenu hidden">
                    <a href="/categories/update/<%= category_id %>">
                        <button type="submit">Update</button>
                    </a>
                    <form id="deleteForm-<%= category_id %>" method="post" action="/categories/delete/<%= category_id %>?_method=DELETE">
                        <button id="deleteBtn-<%= category_id %>" type="button">Delete</button>
                    </form>
                </div>
            </div>
     

          <p class="catName"><%= category_name %></p>
          <p><%= item_count %> unique <%= item_count <=1 ? "item" : "items" %></p>
        </div>
      <%} ) %>

    </div>

      
  </body>
</html>
